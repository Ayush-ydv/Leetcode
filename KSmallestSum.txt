#include <vector>

using namespace std;

class Solution {
public:
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        vector<vector<int>> result;

        if (nums1.empty() || nums2.empty() || k <= 0)
            return result;

        // Custom comparator for sorting pairs based on the sum
        auto compare = [&](const pair<int, int>& a, const pair<int, int>& b) {
            return nums1[a.first] + nums2[a.second] > nums1[b.first] + nums2[b.second];
        };

        // Priority queue to store indices of pairs
        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(compare)> pq(compare);

        // Start with the first pair (0, 0)
        pq.push(make_pair(0, 0));

        while (!pq.empty() && k > 0) {
            pair<int, int> curr = pq.top();
            pq.pop();
            int i = curr.first;
            int j = curr.second;

            result.push_back({nums1[i], nums2[j]});

            // Expand to the next pairs: (i+1, j) and (i, j+1)
            if (i + 1 < nums1.size())
                pq.push(make_pair(i + 1, j));
            if (j + 1 < nums2.size())
                pq.push(make_pair(i, j + 1));

            k--;
        }

        return result;
    }
};
